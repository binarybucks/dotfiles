## Init Zsh functions
  autoload -Uz compinit
  compinit
  compdef -d git
  fpath=(~/.zsh/functions $fpath)
  autoload -U ~/.zsh/functions/*(:t)

## Check which host we are running on
  export SHORTHOST=$(hostname -s)

## Export lang for mosh to work
  export LANG=en_US.UTF-8
  export LC_CTYPE=en_US.UTF-8
  export LC_ALL=en_US.UTF-8

## Colors
  autoload -U colors && colors

## Git symbols
export ZSH_THEME_GIT_PROMPT_PREFIX="(" # Prefix at the very beginning of the prompt, before the branch name
export ZSH_THEME_GIT_PROMPT_SUFFIX=") " # At the very end of the prompt
export ZSH_THEME_GIT_PROMPT_DIRTY=" ~" # Text to display if the branch is dirty
export ZSH_THEME_GIT_PROMPT_CLEAN="" # Text to display if the branch is clean

export ZSH_THEME_GIT_PROMPT_ADDED="+"
export ZSH_THEME_GIT_PROMPT_MODIFIED="!"
export ZSH_THEME_GIT_PROMPT_DELETED="-"
export ZSH_THEME_GIT_PROMPT_RENAMED=">"
export ZSH_THEME_GIT_PROMPT_UNMERGED="|UNMERGED"
export ZSH_THEME_GIT_PROMPT_UNTRACKED="?"


git_prompt_info
## Shell promt
  #export PS1='%{$fg[black]%}%n@%m %{$fg[black]%}%{$fg_bold[black]%}%3~%{$fg[reset_color]%} %{$fg[black]%}$(git_prompt_info)> '
  export PS1='%n@%m %3~ $(git_prompt_info)> '

  function setWindowTitle() {
        case $TERM in
        screen*)
		# We're in screen or tmux, so set the terminal title and the screen window title
		# The following doesnt work, because tmux eats the escape sequences
		print -Pn "\033]0;%n@%m: %~\007"
		;;
        xterm*)
                print -Pn "\033]0;%n@%m: %~\007"
		;;
        esac
  }

## Set & reset the terminal title(s)
  function precmd() {
        setWindowTitle
  }
  function preexec() {
	setWindowTitle
  }
  precmd_functions+=title_precmd
  preexec_functions+=title_preexec

## Editor, path & manpath 
  export EDITOR='vim'
  export PATH="~/.bin:~/.scripts:/opt/local/bin:/usr/local/bin:/usr/local/sbin:$PATH"
  export MANPATH="/usr/local/man:$MANPATH"

## Custom Paths
  export CODEPATH=~/Code

## Zsh historyy
  HISTFILE=~/.zsh_history
  HISTSIZE=1000
  SAVEHIST=1000

## Zsh options
  setopt autocd
  setopt NO_LIST_BEEP
  setopt HIST_VERIFY
  setopt SHARE_HISTORY
  setopt PROMPT_SUBST
  setopt COMPLETE_IN_WORD
  setopt IGNORE_EOF
  setopt APPEND_HISTORY # adds history
  setopt INC_APPEND_HISTORY # adds history incrementally 
  setopt HIST_IGNORE_ALL_DUPS # don't record dupes in history
  setopt HIST_REDUCE_BLANKS

## Key bindings
  bindkey '^R' history-incremental-search-backward
  bindkey '^A' beginning-of-line
  bindkey '^E' end-of-line


## Setup SSH Agent environment
  export SSH_AUTH_SOCK_DEFAULT=~/.ssh/.agent_socket
  # ~/.ssh/.agent_socket always points to the SSH agent socket of the latest session
  # If there are multiple sessions, and the latest session is closed, SSH agent will stop working in all other sessions
  # running fixagent relinks the ~/.ssh/.agent_socket to the the latest agent socket
  alias fixagent='LAST="$(find /tmp/ssh-* -user `whoami` -name agent\* | tail -n 1)" && ln -sf "$LAST" "$SSH_AUTH_SOCK_DEFAULT" && export SSH_AUTH_SOCK=$SSH_AUTH_SOCK_DEFAULT && echo "SSH_AUTH_SOCK initialized: $SSH_AUTH_SOCK_DEFAULT -> $LAST"'


#Check if SSH_AUTH_SOCK is a socket. If so, symlink ~/.ssh/.agent_socket to it. 
  echo "Current SSH_AUTH_SOCK: $SSH_AUTH_SOCK"
  if [[ -S $SSH_AUTH_SOCK && ! -h $SSH_AUTH_SOCK ]]; then
    ln -sf $SSH_AUTH_SOCK $SSH_AUTH_SOCK_DEFAULT
    echo "SSH agent environment initialized: $SSH_AUTH_SOCK_DEFAULT -> $SSH_AUTH_SOCK"
  fi
  export SSH_AUTH_SOCK=$SSH_AUTH_SOCK_DEFAULT;

# Check if an agent is already running. If not, start it at $SSH_AUTH_SOCK_DEFAULT
  ssh-add -l >/dev/null 2>&1
  if [ $? = 2 ]; then
    rm -rf $SSH_AUTH_SOCK
    ssh-agent -a $SSH_AUTH_SOCK >| ~/.ssh/.agent_env
    source ~/.ssh/.agent_env
    echo "SSH agent started"
  else 
    echo "SSH agent identities"
    ssh-add -l
  fi
